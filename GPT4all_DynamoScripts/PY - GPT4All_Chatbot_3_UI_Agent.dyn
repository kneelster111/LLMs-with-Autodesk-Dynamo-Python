{
  "Uuid": "34954235-0d7d-4490-9d78-51cc7f815761",
  "IsCustomNode": false,
  "Description": "Chat bot using GPT4ALL LLM Python Library",
  "Name": "PY - GPT4All_Chatbot_3_UI_Agent",
  "ElementResolver": {
    "ResolutionMap": {
      "List": {
        "Key": "List",
        "Value": "BuiltIn.ds"
      }
    }
  },
  "Inputs": [],
  "Outputs": [
    {
      "Id": "f390d968eedd459b9b4a3b6a5324690d",
      "Name": "Output",
      "Type": "integer",
      "InitialValue": "0",
      "Description": "Visualize the node's output"
    }
  ],
  "Nodes": [
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "e3f5ae3eca73461fa16d448ee231341c",
      "Inputs": [
        {
          "Id": "5380842abced4a6293536e3db547eb82",
          "Name": "",
          "Description": "Node to show output from",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "939964a7746d453da678c73ad53c04d1",
          "Name": "",
          "Description": "Node output",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the node's output"
    },
    {
      "ConcreteType": "CoreNodeModels.FromArray, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "7d9bce8922144d359be952b4024adcb6",
      "Inputs": [
        {
          "Id": "d493e00ad11d4e5891d5ece75900f468",
          "Name": "array",
          "Description": "The array of object to be serialized",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b6d15d59c4264fb0a100762254302f4c",
          "Name": "string",
          "Description": "String representation of the array",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Convert an array to a string representation."
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfCategory, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "bdd549fcd4094ddd810f61f9c33ea203",
      "Inputs": [
        {
          "Id": "09173e8ea3ac468f8c23f67204348321",
          "Name": "Category",
          "Description": "The Category",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7acbf261fc9045d6b7eb68c0bdfbecf3",
          "Name": "Elements",
          "Description": "An element class.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Get all elements of the specified category from the model."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "elements;\nelements2 = List.Flatten(elements, -1);",
      "Id": "56218a1fcd2a4f938495f7fda54f2301",
      "Inputs": [
        {
          "Id": "12703ff1a162420794dd0120d64e74d3",
          "Name": "elements",
          "Description": "elements",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e8773a8d72e04d9cb123bdac1827599f",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e5683bc7c20b4470b9de9e1650b5780f",
          "Name": "",
          "Description": "elements2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.Parameters",
      "Id": "54569343473b487798b668c132472d25",
      "Inputs": [
        {
          "Id": "ba020479bcf541c2b8ae35ccc53c85ed",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0726904342944c4ca782f9297faf7713",
          "Name": "Parameter[]",
          "Description": "Parameter[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Obtain all of the Parameters from an Element, sorted by Name.\n\nElement.Parameters: Parameter[]"
    },
    {
      "ConcreteType": "CoreNodeModels.HigherOrder.ApplyFunction, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "7ff6499e0dd7418b8d7658d49bfecb1f",
      "Inputs": [
        {
          "Id": "521732d767a649faa2bc3158348d40ba",
          "Name": "function",
          "Description": "Function to apply.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2de14422b607473897c7e95839693819",
          "Name": "argument0",
          "Description": "Argument #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "00be2e809a884eca891749f47ce6182c",
          "Name": "result",
          "Description": "Result of application.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Returns the result of a function with supplied arguments. Ex: arguments of a point and vector are applied to a translate function returning a translated point."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "f390d968eedd459b9b4a3b6a5324690d",
      "Inputs": [
        {
          "Id": "03efe0f20ee9474f9dfa271c027f70cd",
          "Name": "",
          "Description": "Node to show output from",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6583ac91150743b9a21a0edd19cf9314",
          "Name": "",
          "Description": "Node output",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the node's output"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\"\"\"\r\nAuthor: Neel Shah\r\nEmail: neel.shah.gbim@gmail.com\r\nGitHub: https://github.com/kneelster111/LLMs-with-Autodesk-Dynamo-Python\r\n\r\nThis project is licensed under the Creative Commons Attribution-Noncommercial (CC BY-NC) license, allowing modification and redistribution for non-commercial purposes only, with attribution to the original author. The code is experimental and provided \"as is\" with no warranty. Use at your own risk.\r\n\"\"\"\r\n\r\n\r\n# Import necessary Dynamo and Revit modules\r\nimport clr\r\nclr.AddReference('RevitServices')\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nimport sys\r\nimport os\r\n\r\nlocalapp = os.getenv(r'LOCALAPPDATA')\r\n\r\nsys.path.append(os.path.join(localapp, r'python-3.9.12-embed-amd64\\Lib\\site-packages'))\r\n\r\nimport System\r\nimport System.Drawing\r\nimport System.Windows.Forms\r\nimport time\r\n\r\nimport gpt4all\r\nfrom gpt4all import GPT4All\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\nresfresh, revitdata, modelname, system_prompt = IN\r\n\r\n# Initialize client for the selected model\r\n\r\nmodel = GPT4All(\"Meta-Llama-3-8B-Instruct.Q4_0.gguf\")  # Loads the model\r\n\r\nclass ChatForm(System.Windows.Forms.Form):\r\n    def __init__(self):\r\n        self.start_time = time.time()\r\n        self.conversation_history = []  # Initialize conversation history\r\n        self.InitializeComponent()\r\n        self.code_executed_correctly = False\r\n\r\n    def InitializeComponent(self):\r\n        self.Text = \"Dynamo AI Chat App\"\r\n        self.Size = System.Drawing.Size(700, 900)\r\n        self.toolTip = System.Windows.Forms.ToolTip()\r\n        self.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen\r\n        self.FormBorderStyle = System.Windows.Forms.FormBorderStyle.Sizable\r\n        self.MaximizeBox = True\r\n        self.MinimizeBox = True\r\n\r\n        # Chat history window\r\n        self.chatHistory = System.Windows.Forms.RichTextBox()\r\n        self.chatHistory.Location = System.Drawing.Point(10, 10)\r\n        self.chatHistory.Size = System.Drawing.Size(670, 400)\r\n        self.chatHistory.ReadOnly = True\r\n        self.chatHistory.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D\r\n\r\n        # Chat input window\r\n        self.chatInput = System.Windows.Forms.RichTextBox()\r\n        self.chatInput.Multiline = True\r\n        self.chatInput.Location = System.Drawing.Point(10, 420)\r\n        self.chatInput.Size = System.Drawing.Size(670, 100)\r\n        self.chatInput.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D\r\n        self.chatInput.KeyDown += self.ChatInputKeyDown\r\n\r\n        # Send button\r\n        self.sendButton = System.Windows.Forms.Button()\r\n        self.sendButton.Text = \"Send\"\r\n        self.sendButton.Size = System.Drawing.Size(110, 25)\r\n        self.sendButton.Click += self.SendButtonClick\r\n        # Tooltip for chat input\r\n        self.toolTip.SetToolTip(self.chatInput, \"Type your message here. Press Ctrl + Enter to send.\")\r\n\r\n        # Read Revit data button\r\n        self.readRevitButton = System.Windows.Forms.Button()\r\n        self.readRevitButton.Text = \"Read Revit Data\"\r\n        self.readRevitButton.Size = System.Drawing.Size(110, 25)\r\n        self.readRevitButton.Click += self.ReadRevitButtonClick\r\n        # Tooltip for read Revit data button\r\n        self.toolTip.SetToolTip(self.readRevitButton, \"This will import the active Revit model's data into the chatbot for analysis.\")\r\n\r\n        # Save button\r\n        self.saveButton = System.Windows.Forms.Button()\r\n        self.saveButton.Text = \"Save\"\r\n        self.saveButton.Size = System.Drawing.Size(110, 25)\r\n        self.saveButton.Click += self.SaveButtonClick\r\n        # Tooltip for save button\r\n        self.toolTip.SetToolTip(self.saveButton, \"This will save the chat history as a txt file.\")\r\n        \r\n        # Run Code button\r\n        self.runCodeButton = System.Windows.Forms.Button()\r\n        self.runCodeButton.Text = \"Run Code\"\r\n        self.runCodeButton.Size = System.Drawing.Size(110, 25)\r\n        self.runCodeButton.Click += self.RunCodeButtonClick\r\n        # Tooltip for run code button\r\n        self.toolTip.SetToolTip(self.runCodeButton, \"This will execute the code typed in the chat input.\")\r\n\r\n        # Integer input textbox\r\n        self.intInput = System.Windows.Forms.TextBox()\r\n        self.intInput.Size = System.Drawing.Size(50, 25)\r\n        self.intInput.Text = \"5\"\r\n        # Tooltip for integer input textbox\r\n        self.toolTip.SetToolTip(self.intInput, \"Enter a number from 1 to 20. This will be used as the number of times the chatbot will autorun.\")\r\n\r\n        # Run Code Agent button\r\n        self.runCodeAgentButton = System.Windows.Forms.Button()\r\n        self.runCodeAgentButton.Text = \"Run Code Agent\"\r\n        self.runCodeAgentButton.Size = System.Drawing.Size(110, 25)\r\n        self.runCodeAgentButton.Click += self.RunCodeAgentClick\r\n        # Tooltip for Run Code Agent button\r\n        self.toolTip.SetToolTip(self.runCodeAgentButton, \"This will run the chatbot in a loop until the specified number of iterations is reached.\")\r\n\r\n        # Time taken label\r\n        self.timeLabel = System.Windows.Forms.Label()\r\n        self.timeLabel.Size = System.Drawing.Size(130, 25)\r\n\r\n        # FlowLayoutPanel for buttons at the bottom\r\n        self.bottomPanel = System.Windows.Forms.FlowLayoutPanel()\r\n        self.bottomPanel.Dock = System.Windows.Forms.DockStyle.Bottom\r\n        self.bottomPanel.FlowDirection = System.Windows.Forms.FlowDirection.LeftToRight\r\n        self.bottomPanel.WrapContents = False\r\n        self.bottomPanel.AutoSize = True\r\n        self.bottomPanel.Padding = System.Windows.Forms.Padding(10)\r\n\r\n        # Add the controls for sending messages and running the code agent into the bottom panel\r\n        self.bottomPanel.Controls.Add(self.sendButton)\r\n        self.bottomPanel.Controls.Add(self.readRevitButton)\r\n        self.bottomPanel.Controls.Add(self.saveButton)\r\n        self.bottomPanel.Controls.Add(self.runCodeButton)  # New Run Code Button\r\n        self.bottomPanel.Controls.Add(self.intInput)\r\n        self.bottomPanel.Controls.Add(self.runCodeAgentButton)\r\n\r\n        # Adding all the main UI components\r\n        self.Controls.Add(self.chatHistory)\r\n        self.Controls.Add(self.chatInput)\r\n        self.Controls.Add(self.bottomPanel)  # This contains all the buttons now\r\n        self.Controls.Add(self.timeLabel)\r\n\r\n\r\n        # Style enhancements (basic)\r\n        self.BackColor = System.Drawing.Color.White\r\n        self.chatHistory.BackColor = System.Drawing.Color.WhiteSmoke\r\n        self.chatInput.BackColor = System.Drawing.Color.WhiteSmoke\r\n        self.sendButton.BackColor = System.Drawing.Color.LightGray\r\n        self.sendButton.ForeColor = System.Drawing.Color.Black\r\n        \r\n        # Define the system prompt\r\n        self.system_prompt = system_prompt\r\n\r\n        # Add the system prompt to the conversation history and chat history\r\n        self.chatHistory.AppendText(self.system_prompt + \"\\n\")\r\n        self.conversation_history.append(self.system_prompt)\r\n        # Set the chatInput as the default focus\r\n        self.chatInput.Focus()\r\n\r\n        # Handle resize event\r\n        self.Resize += self.OnResize\r\n\r\n    def OnResize(self, sender, EventArgs):\r\n        self.chatHistory.Size = System.Drawing.Size(self.ClientSize.Width - 20, self.ClientSize.Height - 200)\r\n        self.chatInput.Location = System.Drawing.Point(10, self.ClientSize.Height - 170)\r\n        self.chatInput.Size = System.Drawing.Size(self.ClientSize.Width - 20, 100)\r\n        self.bottomPanel.Location = System.Drawing.Point(10, self.ClientSize.Height - 80)\r\n        self.timeLabel.Location = System.Drawing.Point(self.ClientSize.Width - 150, self.ClientSize.Height - 60)\r\n        \r\n    def ChatInputKeyDown(self, sender, event):\r\n        if event.Control and event.KeyCode == System.Windows.Forms.Keys.Enter:\r\n            self.SendButtonClick(sender, event)\r\n\r\n    def SendButtonClick(self, sender, EventArgs):\r\n        message = self.chatInput.Text\r\n        if message:\r\n            elapsed_time = time.time() - self.start_time\r\n            minutes, seconds = divmod(elapsed_time, 60)\r\n            time_taken_str = f\"Time taken: {int(minutes)}m {int(seconds)}s\"\r\n            self.timeLabel.Text = time_taken_str\r\n            \r\n            try:\r\n                int_value = int(self.intInput.Text)\r\n                if not (1 <= int_value <= 20):\r\n                    int_value = 5\r\n            except ValueError:\r\n                int_value = 5\r\n            \r\n            # Append user message to chat history\r\n            self.chatHistory.AppendText(f\"User: {message}\\n\")\r\n            self.conversation_history.append(f\"User: {message}\")\r\n            \r\n            # Pass the conversation history to the model\r\n            history = \"\\n\".join(self.conversation_history)\r\n            \r\n            # Load and use the model\r\n            \r\n            result = model.generate(history, max_tokens=1024)\r\n            \r\n\r\n\r\n            self.result = result\r\n            \r\n            # Append bot response to chat history\r\n            self.chatHistory.AppendText(f\"Bot: {result}\\n\")\r\n            self.conversation_history.append(f\"Bot: {result}\")  # Add bot response to history\r\n            \r\n            self.chatInput.Clear()\r\n            self.chatInput.Focus()\r\n\r\n\r\n    def SaveButtonClick(self, sender, EventArgs):\r\n        saveFileDialog = System.Windows.Forms.SaveFileDialog()\r\n        saveFileDialog.Filter = \"Text Files (*.txt)|*.txt|All Files (*.*)|*.*\"\r\n        \r\n        if saveFileDialog.ShowDialog() == System.Windows.Forms.DialogResult.OK:\r\n            with open(saveFileDialog.FileName, 'w') as file:\r\n                file.write(self.chatHistory.Text)\r\n\r\n    def ReadRevitButtonClick(self, sender, EventArgs):\r\n        words = revitdata.split()\r\n        limited_text = ' '.join(words[:2000])\r\n        \r\n        messages = [{\"role\": \"user\", \"content\":f\"System: Revit Model / Project Data, waiting for User next prompt. Data: {limited_text}\"}]\r\n        response = client.chat_completion(messages, max_tokens=1000)\r\n        \r\n        # Extract and format the response\r\n        if 'choices' in response:\r\n            result = response['choices'][0]['message']['content']\r\n        else:\r\n            result = \"Sorry, I couldn't get a response.\"\r\n\r\n        self.result = result\r\n        self.chatHistory.AppendText(f\"Bot: {result}\\n\")\r\n        self.conversation_history.append(f\"Bot: {result}\")  # Add bot response to history\r\n        self.chatInput.Focus()\r\n\r\n    def extract_code(self, text):\r\n        # Markers for the code block\r\n        start_marker = \"```python\"\r\n        end_marker = \"```\"\r\n\r\n        # Find the start and end indices of the code block\r\n        start_index = text.find(start_marker)\r\n        if start_index != -1:\r\n            # Find the end marker after the start marker\r\n            end_index = text.find(end_marker, start_index + len(start_marker))\r\n            \r\n            if end_index != -1:\r\n                # Extract the code text from the markers\r\n                code_text = text[start_index + len(start_marker):end_index].strip()\r\n                \r\n                # Debugging output\r\n                print(f\"Extracted code: '{code_text}'\")\r\n\r\n                if code_text:\r\n                    return code_text\r\n                else:\r\n                    print(\"Warning: Code block is empty.\")\r\n                    return f\"CodeAgent: Error - Code block is empty. Please check your formatting.\"\r\n            else:\r\n                print(\"Warning: End marker not found.\")\r\n                return f\"CodeAgent: Error - End marker for code block not found.\"\r\n        else:\r\n            print(\"Warning: Start marker not found.\")\r\n            return f\"CodeAgent: Error - Start marker for code block not found.\"\r\n    \r\n    def exec_code(self, text):\r\n        try:\r\n            # Extract the Python code from the message\r\n            extracted_code = self.extract_code(text)\r\n            print(f\"Extracted Code: {extracted_code}\")\r\n\r\n            # Execute the extracted Python code\r\n            exec(extracted_code)\r\n\r\n            # Append success message to the chat history\r\n            self.chatHistory.AppendText(f\"\\nCodeAgent: Code executed correctly:\\n{extracted_code}\\n\")\r\n            self.conversation_history.append(f\"CodeAgent: Code executed correctly:\\n{extracted_code}\")\r\n            self.code_executed_correctly = True\r\n\r\n        except Exception as e:\r\n            # Handle any errors encountered during execution\r\n            error_message = str(e)\r\n            self.chatHistory.AppendText(f\"\\nCodeAgent: Error encountered:\\n{error_message}\\n\")\r\n            self.conversation_history.append(f\"CodeAgent: Error encountered:\\n{error_message}\")\r\n\r\n    def RunCodeButtonClick(self, sender, EventArgs):\r\n        # Placeholder for running code directly typed in the chat input\r\n        code_to_run = self.result\r\n        if not code_to_run:\r\n            self.chatHistory.AppendText(\"No code entered.\\n\")\r\n            return\r\n\r\n        self.chatHistory.AppendText(f\"Running code:\\n{code_to_run}\\n\")\r\n        \r\n        # Call the exec_code method with the entered code\r\n        self.exec_code(code_to_run)\r\n\r\n    def RunCodeAgentClick(self, sender, EventArgs):\r\n        try:\r\n            int_value = int(self.intInput.Text)\r\n            if not (1 <= int_value <= 20):\r\n                int_value = 1\r\n        except ValueError:\r\n            int_value = 1\r\n    \r\n        i = 0\r\n        while True:\r\n            message = self.chatInput.Text\r\n            self.chatHistory.AppendText(f\"User: {message}\\n\")\r\n            self.conversation_history.append(f\"User: {message}\")\r\n            history = \"\\n\".join(self.conversation_history)\r\n            \r\n            messages = [{\"role\": \"user\", \"content\": history}]\r\n            client = InferenceClient(modelname)  # Ensure modelname is defined\r\n            response = client.chat_completion(messages, max_tokens=1000)\r\n            \r\n            if 'choices' in response:\r\n                result = response['choices'][0]['message']['content']\r\n            else:\r\n                result = \"Sorry, I couldn't get a response.\"\r\n    \r\n            self.result = result\r\n            self.chatHistory.AppendText(f\"CodeAgent: {result}\\n\")\r\n            self.conversation_history.append(f\"CodeAgent: {result}\")\r\n            \r\n            self.exec_code(sender, EventArgs)\r\n            \r\n            if self.code_executed_correctly:\r\n                self.chatHistory.AppendText(f\"FINAL OUTPUT - {result}\\n\")\r\n                break\r\n            i += 1\r\n            if i >= int_value:\r\n                self.chatHistory.AppendText(f\"FINAL OUTPUT - {result}\\n\")\r\n                break\r\n\r\n    \r\n\r\ndef run():\r\n    app = ChatForm()\r\n    application = System.Windows.Forms.Application\r\n    application.Run(app)\r\n\r\nrun()\r\nOUT=0\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "85b9595891144798905bd3ff92c58118",
      "Inputs": [
        {
          "Id": "2b0b2af260304ee98d56560ffa477cca",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a8697c0b8e864452a7280ef3e2865a44",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "bff77f4955bf45ee8b4a949f8efbc5bb",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8ecc216bf9e8460e970832b140cf3ddf",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "63926be10f2b4d0bb7eb7506d382ad95",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "4430b2e15d7b46a3b4ae82c37e3b2ff4",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f08021b73d3c4846a359f3682784757e",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "Qwen/Qwen2.5-Coder-32B-Instruct",
      "Id": "13bc1a6eda0842b1b589077246bd1f5c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "0e087d0b6efe4858b4b9497f6da821bf",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a string."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\n\r\n# Place your code below this line\r\nsystem_prompt = \"\"\"\r\nSystem Prompt: You are an expert Revit assistant and Dynamo Python Code Agent. Your role is to assist with tasks related to Revit 2023+ and Dynamo, leveraging CPython 3.9. You should always provide solutions in a professional and clear manner.\r\n\r\nThe format for user requests, assistant responses, and code output must follow the structure outlined below:\r\n\r\n1. **User** / **Bot** / **CodeAgent**: ## The task or the assistant's response.\r\n2. **Code**: The Python code that addresses the task. The code should always include the necessary imports and libraries, including the default `clr` import for Dynamo scripting.\r\n\r\nExample:\r\n\r\nUser: \"How can I create a new wall in Revit using Dynamo?\"\r\nBot: \"Here is the Python script for creating a new wall in Revit using Dynamo:\"\r\nCode:\r\n```python\r\n## Python code goes here ##\r\nimport clr\r\n```<end_action> \r\n\r\nEnsure all code is encapsulated in triple backticks for clarity. The response should be clear, concise, and focused on solving the user's problem.\r\n\"\"\"\r\n# Assign your output to the OUT variable.\r\nOUT = system_prompt",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "b64c333f556b46cab12f4af7f9688ea3",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f4bef4df502840518a6844a47bf04382",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "revitCategories;\nCategoryname;",
      "Id": "021e6eb763244fa5946035f27fc5881a",
      "Inputs": [
        {
          "Id": "9fc41f62e53641d7bf6ac8bedcf42833",
          "Name": "revitCategories",
          "Description": "revitCategories",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "af110af303d5414199ef359d6dc8fed6",
          "Name": "Categoryname",
          "Description": "Categoryname",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b2d56459c56f434cbd93124ce26a208c",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5da4db2785634e3982f2d8bffb94a4da",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x[0];\nx[1];",
      "Id": "42e9d3fb9e8e4bc49e48b19b4e54fb40",
      "Inputs": [
        {
          "Id": "0877b7657bb3418ea44e1bd57afa2324",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a5a5892c126c412793497cfa3edba56b",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0d47a6ad700049f6bc8fbd79e73bd7bb",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import *\r\nclr.AddReference('RevitServices')\r\nfrom RevitServices.Persistence import DocumentManager\r\n\r\n# Get the current document\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n# Access Categories\r\ncategories = doc.Settings.Categories\r\n\r\n# Initialize lists to store model and annotation category names\r\nmodel_categories = []\r\nannotation_categories = []\r\n\r\n# Iterate over all categories and separate them into model and annotation\r\nfor cat in categories:\r\n    if cat.CategoryType == CategoryType.Model:\r\n        model_categories.append(cat.Name)\r\n    elif cat.CategoryType == CategoryType.Annotation:\r\n        annotation_categories.append(cat.Name)\r\n\r\n# Output both model and annotation categories\r\nOUT = model_categories, annotation_categories\r\n",
      "Engine": "IronPython2",
      "EngineName": "IronPython2",
      "VariableInputPorts": true,
      "Id": "8bcecdc4de984211831d2c114978f04a",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "d269043f4c2a44deafe397f506aecacb",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Category.ByName@string",
      "Id": "6b5775044a1e4b67a3180e3a04c4b3ea",
      "Inputs": [
        {
          "Id": "ed68da8064924c83befe3703cac74286",
          "Name": "name",
          "Description": "The built in category name.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "51aed120257e4201af3fa7775ca8cf9f",
          "Name": "Category",
          "Description": "Category",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Gets a Revit category by the built-in category name.\n\nCategory.ByName (name: string): Category"
    }
  ],
  "Connectors": [
    {
      "Start": "939964a7746d453da678c73ad53c04d1",
      "End": "a8697c0b8e864452a7280ef3e2865a44",
      "Id": "dbad98dac0f74a0999bcefb1da761a07",
      "IsHidden": "False"
    },
    {
      "Start": "b6d15d59c4264fb0a100762254302f4c",
      "End": "5380842abced4a6293536e3db547eb82",
      "Id": "73eb730ab48244f78428c4cfe6cb54a2",
      "IsHidden": "False"
    },
    {
      "Start": "7acbf261fc9045d6b7eb68c0bdfbecf3",
      "End": "12703ff1a162420794dd0120d64e74d3",
      "Id": "cc58ec0aa16c4a5ca777a1563e35f0f6",
      "IsHidden": "False"
    },
    {
      "Start": "e5683bc7c20b4470b9de9e1650b5780f",
      "End": "2de14422b607473897c7e95839693819",
      "Id": "b1268203a2d54ebd9c78b341640031ae",
      "IsHidden": "False"
    },
    {
      "Start": "0726904342944c4ca782f9297faf7713",
      "End": "521732d767a649faa2bc3158348d40ba",
      "Id": "525f8613a6c84e1284c2ca9d653c25a2",
      "IsHidden": "False"
    },
    {
      "Start": "00be2e809a884eca891749f47ce6182c",
      "End": "d493e00ad11d4e5891d5ece75900f468",
      "Id": "70a1556655dd48cd87a0c355546072a5",
      "IsHidden": "False"
    },
    {
      "Start": "63926be10f2b4d0bb7eb7506d382ad95",
      "End": "03efe0f20ee9474f9dfa271c027f70cd",
      "Id": "b2b62b7417b54139b1653002e3b1db6b",
      "IsHidden": "False"
    },
    {
      "Start": "f08021b73d3c4846a359f3682784757e",
      "End": "2b0b2af260304ee98d56560ffa477cca",
      "Id": "5016f7176bb144aeb4956ba04b97ecf8",
      "IsHidden": "False"
    },
    {
      "Start": "0e087d0b6efe4858b4b9497f6da821bf",
      "End": "bff77f4955bf45ee8b4a949f8efbc5bb",
      "Id": "3d032cedec664a959e261aa036adc91e",
      "IsHidden": "False"
    },
    {
      "Start": "f4bef4df502840518a6844a47bf04382",
      "End": "8ecc216bf9e8460e970832b140cf3ddf",
      "Id": "3746221339ab48ccb6a35172ff16a8f3",
      "IsHidden": "False"
    },
    {
      "Start": "b2d56459c56f434cbd93124ce26a208c",
      "End": "09173e8ea3ac468f8c23f67204348321",
      "Id": "12974fff65474ba7a781071c1bc2814b",
      "IsHidden": "False"
    },
    {
      "Start": "a5a5892c126c412793497cfa3edba56b",
      "End": "9fc41f62e53641d7bf6ac8bedcf42833",
      "Id": "693d9f81199c4aa089c828443e99be40",
      "IsHidden": "False"
    },
    {
      "Start": "0d47a6ad700049f6bc8fbd79e73bd7bb",
      "End": "af110af303d5414199ef359d6dc8fed6",
      "Id": "382c973c7f8944e4a6a9352e524acc37",
      "IsHidden": "False"
    },
    {
      "Start": "d269043f4c2a44deafe397f506aecacb",
      "End": "ed68da8064924c83befe3703cac74286",
      "Id": "0922d74e7c904c2196406086f73509c6",
      "IsHidden": "False"
    },
    {
      "Start": "51aed120257e4201af3fa7775ca8cf9f",
      "End": "0877b7657bb3418ea44e1bd57afa2324",
      "Id": "a0c391536e544fd5b1afe72f059a3088",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Thumbnail": "",
  "GraphDocumentationURL": "https://github.com/kneelster111/LLMs-with-Autodesk-Dynamo-Python",
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "2.16",
      "Data": {}
    },
    {
      "ExtensionGuid": "DFBD9CC0-DB40-457A-939E-8C8555555A9D",
      "Name": "Generative Design",
      "Version": "3.0",
      "Data": {}
    }
  ],
  "Author": "neel.shah.gbim@gmail.com",
  "Linting": {
    "activeLinter": "None",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.16.4.10216",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Name": "Watch",
        "ShowGeometry": false,
        "Id": "e3f5ae3eca73461fa16d448ee231341c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1438.3212668229748,
        "Y": 1336.8270230357464
      },
      {
        "Name": "String from Array",
        "ShowGeometry": true,
        "Id": "7d9bce8922144d359be952b4024adcb6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1740.3212668229748,
        "Y": 1336.8270230357464
      },
      {
        "Name": "All Elements of Category",
        "ShowGeometry": false,
        "Id": "bdd549fcd4094ddd810f61f9c33ea203",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2965.3212668229748,
        "Y": 1419.3095230357467
      },
      {
        "Name": "Code Block",
        "ShowGeometry": false,
        "Id": "56218a1fcd2a4f938495f7fda54f2301",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2608.3212668229748,
        "Y": 1419.3095230357467
      },
      {
        "Name": "Element.Parameters",
        "ShowGeometry": true,
        "Id": "54569343473b487798b668c132472d25",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2608.3212668229748,
        "Y": 1271.8270230357464
      },
      {
        "Name": "Function Apply",
        "ShowGeometry": true,
        "Id": "7ff6499e0dd7418b8d7658d49bfecb1f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2045.3212668229748,
        "Y": 1336.8270230357464
      },
      {
        "Name": "Output",
        "ShowGeometry": true,
        "Id": "f390d968eedd459b9b4a3b6a5324690d",
        "IsSetAsInput": false,
        "IsSetAsOutput": true,
        "Excluded": false,
        "X": -303.753619096595,
        "Y": 1816.5623034631308
      },
      {
        "Name": "*OkCheck* Chat bot with UI  - with Agent and Read Data",
        "ShowGeometry": true,
        "Id": "85b9595891144798905bd3ff92c58118",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -895.753619096595,
        "Y": 1816.5623034631308
      },
      {
        "Name": "Boolean",
        "ShowGeometry": true,
        "Id": "4430b2e15d7b46a3b4ae82c37e3b2ff4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1216.753619096595,
        "Y": 1719.5623034631308
      },
      {
        "Name": "String",
        "ShowGeometry": true,
        "Id": "13bc1a6eda0842b1b589077246bd1f5c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1216.753619096595,
        "Y": 1866.5623034631308
      },
      {
        "Name": "PY - System Prompt",
        "ShowGeometry": true,
        "Id": "b64c333f556b46cab12f4af7f9688ea3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1216.753619096595,
        "Y": 2033.5623034631308
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "021e6eb763244fa5946035f27fc5881a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3383.3212668229748,
        "Y": 1419.1370230357468
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "42e9d3fb9e8e4bc49e48b19b4e54fb40",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3637.3212668229748,
        "Y": 1427.7920230357472
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "8bcecdc4de984211831d2c114978f04a",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4226.3212668229753,
        "Y": 1427.7920230357472
      },
      {
        "Name": "Category.ByName",
        "ShowGeometry": true,
        "Id": "6b5775044a1e4b67a3180e3a04c4b3ea",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3952.3212668229748,
        "Y": 1427.7920230357472
      }
    ],
    "Annotations": [
      {
        "Id": "880de67e63004992b9a4f25cd5ef3af6",
        "Title": "Control get all categories and model infomation",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "e3f5ae3eca73461fa16d448ee231341c",
          "7d9bce8922144d359be952b4024adcb6",
          "bdd549fcd4094ddd810f61f9c33ea203",
          "56218a1fcd2a4f938495f7fda54f2301",
          "54569343473b487798b668c132472d25",
          "7ff6499e0dd7418b8d7658d49bfecb1f",
          "42e9d3fb9e8e4bc49e48b19b4e54fb40",
          "021e6eb763244fa5946035f27fc5881a",
          "6b5775044a1e4b67a3180e3a04c4b3ea",
          "8bcecdc4de984211831d2c114978f04a"
        ],
        "HasNestedGroups": false,
        "Left": -4236.3212668229753,
        "Top": 1212.8270230357464,
        "Width": 3305.0000000000005,
        "Height": 368.3100000000004,
        "FontSize": 24.0,
        "InitialTop": 1271.8270230357464,
        "InitialHeight": 379.48249999999985,
        "TextblockHeight": 49.0,
        "Background": "#FF90EE90"
      },
      {
        "Id": "984546b05cfa4b54858b37999ce8a2a0",
        "Title": "Control *OkCheck* Chat bot with UI  - with Agent and Read Data",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "f390d968eedd459b9b4a3b6a5324690d",
          "85b9595891144798905bd3ff92c58118",
          "4430b2e15d7b46a3b4ae82c37e3b2ff4",
          "13bc1a6eda0842b1b589077246bd1f5c",
          "b64c333f556b46cab12f4af7f9688ea3"
        ],
        "HasNestedGroups": false,
        "Left": -1226.753619096595,
        "Top": 1660.5623034631308,
        "Width": 1058.0,
        "Height": 505.0,
        "FontSize": 24.0,
        "InitialTop": 1719.5623034631308,
        "InitialHeight": 476.0,
        "TextblockHeight": 49.0,
        "Background": "#FF90EE90"
      }
    ],
    "X": 1463.2904919611626,
    "Y": -2050.2238780101488,
    "Zoom": 1.3147981043577393
  }
}